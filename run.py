import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from google_module.google_module import put_values
import json
from aiogram.exceptions import AiogramError, TelegramForbiddenError
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
import send_files

# –°—Ç–∞—Ç—É—Å—ã —Å–æ–æ–±—â–µ–Ω–∏–π
statuses = {}


# –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞
with open("config.json", "r") as read_file:
    config = json.load(read_file)

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)
# root_logger= logging.getLogger()
# root_logger.setLevel(logging.WARNING) # or whatever
# handler = logging.FileHandler('app.log', 'a', 'utf-8') # or whatever
# handler.setFormatter(logging.Formatter('%(name)s %(message)s - %(asctime)s')) # or whatever
# root_logger.addHandler(handler)

# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token=config["TG_TOKEN"])
# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()


@dp.callback_query(lambda call: call.from_user.id not in statuses)
async def start_callback(call: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è inline –∫–Ω–æ–ø–∫–∏, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
    """
    try:
        await call.message.delete()
    except:
        return await call.message.answer("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    await cmd_start(call.message)


@dp.message(commands=["instructions"])
async def inst_start(message: types.Message):
    """
    –ù–∞ –∫–æ–º–∞–Ω–¥—É /instructions –≤—ã—Å—ã–ª–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    """
    return await sending_messages("""–ü–µ—Ä–µ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø—Ä–æ—Å–∏–º –æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:
1. –ó–∞–¥–∞—á–∏ –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ø–æ –º–µ—Ä–µ –∏—Ö –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∏ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ (–∞ —Ç–∞–∫–∂–µ —Å–æ—á–Ω–æ—Å—Ç–∏ üòâ).
2. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å (–ø—Ä–æ—Å—Ç–æ –µ—Å–ª–∏ –±—É–¥–µ—Ç –Ω–µ –æ—á–µ–Ω—å –ø–æ–Ω—è—Ç–Ω–æ, —Ç–æ –º—ã –Ω–∞—á–Ω–µ–º –ø–∏—Å–∞—Ç—å –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ‚Ä¶ –Ω—É –í—ã –ø–æ–Ω—è–ª–∏üòµ‚Äçüí´).
3. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–µ –∏–≥—Ä—É—à–∫–∞ üß∏ –û—Ü–µ–Ω–∏–≤–∞–π—Ç–µ –µ–≥–æ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ. –ì–¥–µ 1 - –ù–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ, 10 - –û—á–µ–Ω—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ.
4. –ü–æ –∂–µ–ª–∞–Ω–∏—é –í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å —Å–µ–±—è –∫–∞–∫ –∞–≤—Ç–æ—Ä–∞. (–ú—ã –≤–∞–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—à–µ–º).
5. –í –∑–∞–ø—Ä–æ—Å –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ—é –∏–¥–µ—é, –Ω–µ–¥–æ—Ä–∞–±–æ—Ç–∫—É –∏–ª–∏ –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä—É—é –í—ã –∑–∞–º–µ—Ç–∏–ª–∏, —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å –∏ –æ–Ω–∏ —Å–Ω–∏–∑–∏–ª–∏ –≤–∞—à—É —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.
6. –í–≤–æ–¥–∏—Ç–µ —Å—Ä–æ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç–∞.–º–µ—Å—è—Ü
7. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ —Ä–µ–µ—Å—Ç—Ä - <a href="https://t.me/">Name</a>.""", message=message, parse_mode="HTML")


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(lambda message: message.from_user.id not in statuses)
@dp.message(commands=["start"])
async def cmd_start(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –ª–∏–±–æ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞, –ø–æ–∫–∞ —Ä–∞–±–æ—Ç–∞ —Å –±–æ—Ç–æ–º –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å
    """
    # –ï—Å–ª–∏ –Ω–µ –≤ –ª–∏—á–∫—É –Ω–∞–ø–∏—Å–∞–ª–∏, —Ç–æ –∏–≥–Ω–æ—Ä–∏–º
    if message.from_user.id != message.chat.id:
        return
    # –ó–∞–ø–∏—Å—ã–≤–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ–º –∑–∞–ø–æ–ª–Ω—è—Ç—å –ø–æ–∑–∂–µ
    statuses[message.from_user.id] = []
    await sending_messages("""–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –í—ã –º–æ–≥–ª–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è:
-—Ç—Ä—É–¥–Ω–æ—Å—Ç—å—é, —Å –∫–æ—Ç–æ—Ä–æ–π –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Å—Ç–∞–ª–∫–∏–≤–∞–µ—Ç–µ—Å—å;
-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ä–∞–±–æ—Ç—ã;
-–≥–∏–ø–æ—Ç–µ–∑–æ–π/–º—ã—Å–ª—å—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å;
-–∑–∞–¥–∞—á–∏, –¥–æ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –¥–æ—Ö–æ–¥—è—Ç —Ä—É–∫–∏ –∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–∏.

–°–æ–≤–µ—Ç—É–µ–º –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å <b>—Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–º</b> /instructions
–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥–∏—Ç–µ /start (–µ–≥–æ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –º–µ–Ω—é)""", message=message, parse_mode="HTML", reply_markup=types.ReplyKeyboardRemove())

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ç–¥–µ–ª–∞–º–∏
    builder = InlineKeyboardBuilder()
    
    builder.row(
        types.InlineKeyboardButton(text="–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥", callback_data="–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥"), 
        types.InlineKeyboardButton(text="–°–Ω–∞–±–∂–µ–Ω–∏–µ", callback_data="–°–Ω–∞–±–∂–µ–Ω–∏–µ")
    )
    builder.row( 
        types.InlineKeyboardButton(text="–õ–æ–≥–∏—Å—Ç–∏–∫–∞", callback_data="–õ–æ–≥–∏—Å—Ç–∏–∫–∞"), 
        types.InlineKeyboardButton(text="–ê–¥–º–∏–Ω. –æ—Ç–¥–µ–ª", callback_data="–ê–¥–º–∏–Ω. –æ—Ç–¥–µ–ª")
    )
    builder.row(
        types.InlineKeyboardButton(text="–û—Ç–¥–µ–ª –†–∞–∑–≤–∏—Ç–∏—è", callback_data="–û—Ç–¥–µ–ª –†–∞–∑–≤–∏—Ç–∏—è"), 
        types.InlineKeyboardButton(text="", callback_data="") 
    )
    builder.row(
        types.InlineKeyboardButton(text="", callback_data=""), 
        types.InlineKeyboardButton(text="", callback_data="")
    )
    builder.row(
        types.InlineKeyboardButton(text="HR", callback_data="HR"), 
        types.InlineKeyboardButton(text="–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è", callback_data="–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è")
    )
    builder.row( 
        types.InlineKeyboardButton(text="–°—Ä–µ–¥–∞ –†–∞–∑–≤–∏—Ç–∏—è", callback_data="–°—Ä–µ–¥–∞ –†–∞–∑–≤–∏—Ç–∏—è"), 
        types.InlineKeyboardButton(text="–í–Ω—É—Ç—Ä—è–Ω–∫–∞", callback_data="–í–Ω—É—Ç—Ä—è–Ω–∫–∞") 
    )

    return await sending_messages("–£–∫–∞–∂–∏—Ç–µ –æ—Ç–¥–µ–ª, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –∏—Å—Ö–æ–¥–∏—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å:", message=message , reply_markup=builder.as_markup())


@dp.callback_query(lambda call: call.from_user.id in statuses and len(statuses[call.from_user.id]) == 0)
async def getting_advice(call: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–∞ (–Ω–∞–∂–∞—Ç–∏–µ –ø–æ –æ–Ω–æ–º—É –≤—ã—à–µ). –í—ã—Å—ã–ª–∞–µ–º –ø—Ä–æ—Å—å–±—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–¥–µ—é
    """
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª
    statuses[call.from_user.id].append(call.data)
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–ø–∞–ª–∏
    try:
        await call.message.delete()
    except:
        pass
    await sending_messages(
        "–û–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å, –∏–¥–µ—é –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –†–∞—Å–ø–∏—Å—ã–≤–∞–π—Ç–µ –µ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–Ω—è—Ç–Ω–æ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å—Å—ã–ª–æ–∫ –∏ –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–æ–≥–æ, —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å (–ø–æ—ç—Ç–∞–ø–Ω–æ).\n<b>–í—ã—à–ª–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ - —Ñ–∞–π–ª—ã</b>",
         message=call.message, parse_mode="HTML"
    )


@dp.message(lambda message: message.from_user.id in statuses and (len(statuses[message.from_user.id]) == 1 or len(statuses[message.from_user.id]) == 2))
async def getting_priority(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–¥–µ–∏. –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã
    """
    builder = InlineKeyboardBuilder()
    # –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—Ç –æ–∫–æ–Ω—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–∞–π–ª–æ–≤
    builder.row(
        types.InlineKeyboardButton(text="–£ –º–µ–Ω—è –≤—Å—ë!", callback_data="–≤—Å—ë")
    )
    # –ï—Å–ª–∏ –ø–æ–∫–∞ –∏–¥–µ—é –Ω–µ –ø–æ–ª—É—á–∞–ª–∏
    if len(statuses[message.from_user.id]) == 1:
        # –ê –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —à–ª—ë—Ç —Ñ–∞–π–ª—ã
        if not message.text:
            return await sending_messages("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∞ –ø–æ—Å–ª–µ - –¥–æ–∫—É–º–µ–Ω—Ç—ã", message=message)
        # –ó–∞–º–µ–Ω—è–µ–º —Å–∏–º–≤–æ–ª—ã, —á—Ç–æ–±—ã html parse_mode –Ω–æ—Ä–º–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–ª
        text = message.text
        text = text.replace("&","&amp;")
        text = text.replace("<","&lt;")
        text = text.replace(">","&gt;")
        # –î–æ–±–∞–≤–ª—è–µ —Å–ª–æ–≤–∞–≤—å, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ–º –¥–æ–ø–∏—Å—ã–≤–∞—Ç—å id —Ñ–∞–π–ª–æ–≤, —á—Ç–æ –≤—ã—à–ª–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        statuses[message.from_user.id].append({"text":text, "photo":[], "document":[], "video":[], "audio":[]})

        return await sending_messages("–ï—Å–ª–∏ –µ—Å—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è ‚Äî –º–æ–∂–µ—Ç–µ –∏—Ö —Å–∫–∏–Ω—É—Ç—å —Å—é–¥–∞.\n–ö–∞–∫ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –Ω–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—Éüëá", reply_markup=builder.as_markup(), message=message)

    # –ï—Å–ª–∏ –≤–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–¥–æ–∫/–∞—É–¥–∏–æ, —Ç–æ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º
    if not message.photo and not message.video and not message.document and not message.audio:
        return await sending_messages("–í–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ. –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–¥–æ–∫—É–º–µ–Ω—Ç/–∞—É–¥–∏–æ", reply_markup=builder.as_markup(), message=message)
    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º id —Ñ–∞–π–ª–æ–≤
    if message.photo:
        statuses[message.from_user.id][-1]["photo"].append(types.input_media_photo.InputMediaPhoto(media=message.photo[-1].file_id))
    elif message.video:
        statuses[message.from_user.id][-1]["video"].append(types.input_media_video.InputMediaVideo(media=message.video.file_id))
    elif message.document:
        statuses[message.from_user.id][-1]["document"].append(types.input_media_document.InputMediaDocument(media=message.document.file_id))
    elif message.audio:
        statuses[message.from_user.id][-1]["audio"].append(types.input_media_audio.InputMediaAudio(media=message.audio.file_id))
    elif message.text:
        return await sending_messages("–í—ã —É–∂–µ –≤—ã—Å–ª–∞–ª–∏ —Ç–µ–∫—Å—Ç. –¢–µ–ø–µ—Ä—å –≤—ã—à–ª–∏—Ç–µ –≤–ª–æ–∂–µ–Ω–∏—è", reply_markup=builder.as_markup(), message=message)

    return await sending_messages("–í–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ. –ï—Å–ª–∏ —É –í–∞—Å –µ—Å—Ç—å –µ—â—ë, –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µüëá", reply_markup=builder.as_markup(), message=message)


@dp.callback_query(lambda call: call.data=="–≤—Å—ë" and call.from_user.id in statuses and len(statuses[call.from_user.id]) == 2)
async def getting_files(call: types.CallbackQuery):
    """
    –ò–¥–µ–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –£ –º–µ–Ω—è –≤—Å—ë. –¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å–∏–º —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    """
    # –î–æ–±–∞–≤–∏–º None —á—Ç–æ–±—ã –ø–æ –¥–ª–∏–Ω–µ —Å–ø–∏—Å–∫–∞ –±—ã–ª–æ —è—Å–Ω–æ, —á—Ç–æ —Å –∏–¥–µ—è–º–∏ –≤—Å—ë
    statuses[call.from_user.id].append(None)
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    kb = [
        [types.KeyboardButton(text=str(i)) for i in range(1,6)],
        [types.KeyboardButton(text=str(i)) for i in range(6,11)]
    ]
    
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, one_time_keyboard=True)
    return await sending_messages("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç. –ì–¥–µ 1 - –ù–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ, 10 - –û—á–µ–Ω—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ.", message=call.message, reply_markup=keyboard)


@dp.message(lambda message: message.from_user.id in statuses and len(statuses[message.from_user.id]) == 3)
async def getting_urgency(message: types.Message):
    """
    –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç. –ü—Ä–æ—Å–∏–º —É–∫–∞–∑–∞—Ç—å —Å—Ä–æ–∫–∏
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if message.text not in "12345678910":
        kb = [
            [types.KeyboardButton(text=str(i)) for i in range(1,6)],
            [types.KeyboardButton(text=str(i)) for i in range(6,11)]
        ]
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, one_time_keyboard=True)
    
        return await sending_messages("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç. –ì–¥–µ 1 - –ù–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ, 10 - –û—á–µ–Ω—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ", message=message, reply_markup=keyboard)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    statuses[message.from_user.id].append(message.text)
    return await sending_messages("–ï—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å—Ä–æ–∫ —É –∑–∞–¥–∞—á–∏?\n–ï—Å–ª–∏ –¥–∞ ‚Äî —Ç–æ —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ \"–¥–¥.–º–º\". –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ \"–Ω–µ—Ç\"", message=message, reply_markup=types.ReplyKeyboardRemove())
    

@dp.message(lambda message: message.from_user.id in statuses and len(statuses[message.from_user.id]) == 4)
async def getting_anonymous(message: types.Message):
    """
    –ü–æ–ª—É—á–∞–µ–º —Å—Ä–æ–∫–∏. –ü—Ä–æ—Å–∏–º —É–∫–∞–∑–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å
    """
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–æ—á–Ω–æ—Å—Ç—å
    statuses[message.from_user.id].append(message.text)
    
    kb = [
        [types.KeyboardButton(text="–ê–Ω–æ–Ω–∏–º–Ω–æ")],[types.KeyboardButton(text="–£–∫–∞–∑–∞–≤ –∏–º—è")]
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, one_time_keyboard=True)
    return await sending_messages("–í—ã –∂–µ–ª–∞–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∞–Ω–æ–Ω–∏–º–Ω–æ –∏–ª–∏ —É–∫–∞–∑–∞–≤ –∏–º—è?", message=message, reply_markup=keyboard)


@dp.message(lambda message: message.from_user.id in statuses and len(statuses[message.from_user.id]) == 5)
async def getting_name(message: types.Message):
    """
    –ü–æ–ª—É—á–∞–µ–º –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å, —Ñ–∏–Ω–∏—à/–ø–æ–ª—É–∞–µ–º –∏–º—è
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    if message.text not in ["–£–∫–∞–∑–∞–≤ –∏–º—è", "–ê–Ω–æ–Ω–∏–º–Ω–æ"]:
        kb = [
            [types.KeyboardButton(text="–ê–Ω–æ–Ω–∏–º–Ω–æ")],[types.KeyboardButton(text="–£–∫–∞–∑–∞–≤ –∏–º—è")]
        ]
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, one_time_keyboard=True)
        return await sending_messages("–í—ã –∂–µ–ª–∞–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∞–Ω–æ–Ω–∏–º–Ω–æ –∏–ª–∏ —É–∫–∞–∑–∞–≤ –∏–º—è?", message=message, reply_markup=keyboard)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å
    statuses[message.from_user.id].append(message.text)
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å, —Ç–æ –≤—Å—ë
    if message.text == "–ê–Ω–æ–Ω–∏–º–Ω–æ":
        await sending_messages(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É!üòâ\n–ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∏ –æ–±–≥–æ–≤–æ—Ä–∏—Ç –¥–µ—Ç–∞–ª–∏.\n<b>–ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ</b>, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /start\n<b>–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–º</b> /instructions", message=message, reply_markup=types.ReplyKeyboardRemove(), parse_mode="HTML")
        await sending_messages('<b>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ —Ä–µ–µ—Å—Ç—Ä</b> - <a href="https://t.me/">Name</a>\n–ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –∂–µ–ª–∞–Ω–∏–µ –ø–æ–æ–±—â–∞—Ç—å—Å—è ‚Äî –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–µ–º—Éüëå', message=message, parse_mode="HTML")
        
        ### –ü—É—à–∏–º –≤ —Ç–∞–±–ª–∏—Ü—É
        await put_values(config["URL_FOR_TABLE"], statuses[message.from_user.id] + [message.from_user.username])
        
        # –ß—Ç–æ –± –ø—Ä–æ—â–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –±—ã–ª–æ, –≤ "a" –∑–∞–ø–æ–º–Ω–∏–º —Å–ø–∏—Å–æ–∫ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        a = statuses[message.from_user.id]

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫–Ω–µ–π–º
        username = f"\n\n<b>–Æ–∑–µ—Ä-—Ç–µ–≥ –∞–≤—Ç–æ—Ä–∞:</b> @{message.from_user.username}" if message.from_user.username else ""
        # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –≤ —Ç–≥ —á–∞—Ç
        message_id = await sending_messages(f"–í —Ä–µ–µ—Å—Ç—Ä–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç \n<b>{a[0]}</b>\n\n<b>–¢–µ–∫—Å—Ç:</b> {a[1]['text'] if len(a[1]['text'])<3000 else a[1]['text'][:3000]}\n\n<b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç -</b> {a[3]}\n<b>–î–∞—Ç–∞ -</b> {a[4]}{username}", id=config["CHAT_ID"], parse_mode="HTML")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã, —á—Ç–æ –±—ã–ª–∏ –≤—ã—Å–ª–∞–Ω—ã —Å –∏–¥–µ—è–º–∏
        await send_files.send_data(bot, a[1], config["CHAT_ID"], message_id, config) 
        
        # –ß–∏—Å—Ç–∏–º —Å–ª–æ–≤–∞—Ä—å
        del statuses[message.from_user.id]
        return
    else:
        return await sending_messages("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è", message=message, reply_markup=types.ReplyKeyboardRemove())


@dp.message(lambda message: message.from_user.id in statuses and len(statuses[message.from_user.id]) == 6)
async def the_end(message: types.Message):
    """
    –ü–æ–ª—É—á–∞–µ–º –∏–º—è, —Ñ–∏–Ω–∏—à
    """
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è
    statuses[message.from_user.id].append(message.text)

    await sending_messages(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É!üòâ\n–ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∏ –æ–±–≥–æ–≤–æ—Ä–∏—Ç –¥–µ—Ç–∞–ª–∏.\n<b>–ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ</b>, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /start\n<b>–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–º</b> /instructions", message=message, reply_markup=types.ReplyKeyboardRemove(), parse_mode="HTML")
    await sending_messages('–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ —Ä–µ–µ—Å—Ç—Ä - <a href="https://t.me/">Name</a>\n–ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –∂–µ–ª–∞–Ω–∏–µ –ø–æ–æ–±—â–∞—Ç—å—Å—è ‚Äî –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–µ–º—Éüëå.', message=message, parse_mode="HTML")

    # –£–¥–∞–ª—è–µ–º –ê–Ω–æ–Ω–∏–º–Ω–æ/–ù–µ –∞–Ω–æ–Ω–∏–º–Ω–æ    
    del statuses[message.from_user.id][-2]
    
    # –ü—É—à–∏–º –≤ —Ç–∞–±–ª–∏—Ü—É
    await put_values(config["URL_FOR_TABLE"], statuses[message.from_user.id] + [message.from_user.username])

    # –ß—Ç–æ –± –ø—Ä–æ—â–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –±—ã–ª–æ, –≤ "a" –∑–∞–ø–æ–º–Ω–∏–º —Å–ø–∏—Å–æ–∫ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    a = statuses[message.from_user.id]

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫–Ω–µ–π–º
    username = f"\n\n<b>–Æ–∑–µ—Ä-—Ç–µ–≥ –∞–≤—Ç–æ—Ä–∞:</b> @{message.from_user.username}" if message.from_user.username else ""
    # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –≤ —á–∞—Ç
    message_id = await sending_messages(f"–í —Ä–µ–µ—Å—Ç—Ä–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç \n<b>{a[0]}</b>\n\n<b>–¢–µ–∫—Å—Ç:</b> {a[1]['text'] if len(a[1]['text'])<3000 else a[1]['text'][:3000]}\n\n<b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç -</b> {a[3]}\n<b>–î–∞—Ç–∞ -</b> {a[4]}\n<b>–ê–≤—Ç–æ—Ä -</b> {a[-1]}{username}", id=config["CHAT_ID"], parse_mode="HTML")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã, —á—Ç–æ –±—ã–ª–∏ –≤—ã—Å–ª–∞–Ω—ã —Å –∏–¥–µ—è–º–∏
    await send_files.send_data(bot, a[1], config["CHAT_ID"], message_id, config) 
    
    # –ß–∏—Å—Ç–∏–º —Å–ª–æ–≤–∞—Ä—å
    del statuses[message.from_user.id]
    return


# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():
    while True:
        try:
            await dp.start_polling(bot)
        except:
            await asyncio.sleep(5)


# –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –æ—à–∏–±–∫–∏, —á—Ç–æ –± —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ—á–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å
# –ú–æ–∂–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ç–æ–∫
async def sending_messages(text, id=None, message=None, reply_markup=None, parse_mode=None):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–≥. –£ –∑–∞–∫–∞–∑—á–∏–∫–∞ –Ω–µ –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç, –∏–∑-–∑–∞ —ç—Ç–æ–≥–æ —Ç–∞–∫ –¥–µ–ª–∞—é
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º id –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    while True:
        try:
            if message:             # –ï—Å–ª–∏ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
                answer = await message.answer(text, parse_mode=parse_mode, reply_markup=reply_markup)
            else:                   # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                answer = await bot.send_message(id, text, parse_mode=parse_mode, reply_markup=reply_markup)
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º id –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            return answer.message_id
        except TelegramForbiddenError as e:
            logging.warning(e)
            break
        except AiogramError as e:
            logging.warning(e)
            await asyncio.sleep(2)


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–≥ –±–æ—Ç–∞
    asyncio.run(main())
